generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  clientId          String          @id
  redirectUris      String[]
  contactInfo       String
  desc              String
  type              ClientType      @default(Confidential)
  clientSecret      String?
  //Urg, I really would of wanted this to be a list of grants, but @default isn't supported on lists
  allowedTokenGrant Boolean         @default(false)
  expiry            Int             @default(10080)
  Authorization     Authorization[]
}

enum ClientType {
  Public
  Confidential
}

model Authorization {
  ///Model fields
  id     Int                 @id @default(autoincrement())
  //Status of the authorization
  status AuthorizationStatus @default(Created)

  ///Timestamps
  //Timestamp the authorization request was issued
  startDate DateTime  @default(dbgenerated("(now() at time zone 'utc')"))
  //Timestamp the response was send and the code issued, if code issued
  endDate   DateTime?

  ///Authorization parameters
  //Id the client used
  clientId      String
  //Redirect uri used
  redirectUri   String
  //client provided state, if provided
  state         String?
  //response_mode
  responseMode  ResponseMode
  //response_type
  responseTypes ResponseTypes[]
  //scopse
  scopes        String[]
  //nonce
  nonce         String?

  ///Authorization process
  //IP of the resource owner
  userIp     String @db.Inet
  //State generated by BAB
  byondState String @unique @default(dbgenerated("substring(gen_random_bytes(24)::text FROM 3)"))

  ///Response parameters
  //Ckey of the resource owner, if received
  ckey String?
  //Code, if issued
  code String? @unique

  ///Relations
  userData UserData? @relation(fields: [ckey], references: [ckey])
  client   Client    @relation(fields: [clientId], references: [clientId])
}

enum ResponseMode {
  query
  fragment
}

enum ResponseTypes {
  code
  id_token
  none
}

enum PromptOptions {
  none
  login
  consent
  select_account
}

enum AuthorizationStatus {
  //Process has been started
  Created
  //Code has been issued to the client
  CodeIssued
  //Client has requested token
  Completed
}

model UserData {
  ckey          String          @id
  gender        String
  Authorization Authorization[]
}

model ByondCert {
  //Certificate provided to resource owner
  encodedCert String   @id @default(dbgenerated("substring(gen_random_bytes(24)::text FROM 3)"))
  //State to identify request
  byondState  String
  //Ceritificate provided by byond
  byondCert   String
  //IP of the resource owner when encoding the cert
  clientIp    String
  //Time at which the certificate was created, used for garbage collection
  createdTime DateTime @default(dbgenerated("(now() at time zone 'utc')"))

  @@unique([byondState, byondCert])
}

model SigningKey {
  private     Json
  public      Json
  id          String   @id
  active      Boolean? @unique
  createdTime DateTime @default(dbgenerated("(now() at time zone 'utc')"))
}
