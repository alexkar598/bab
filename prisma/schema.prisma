generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  clientId      String          @id
  redirectUris  String[]
  contactInfo   String
  desc          String
  type          ClientType      @default(Confidential)
  client_secret String?
  Authorization Authorization[]
}

enum ClientType {
  Public
  Confidential
}

model Authorization {
  ///Model fields
  id     Int                 @id @default(autoincrement())
  //Status of the authorization
  status AuthorizationStatus @default(Created)

  ///Timestamps
  //Timestamp the authorization request was issued
  startDate DateTime  @default(now())
  //Timestamp the response was send and the code issued, if code issued
  endDate   DateTime?

  ///Authorization parameters
  //Id the client used
  clientId    String
  //Redirect uri used
  redirectUri String
  //client provided state, if provided
  state       String?

  ///Authorization process
  //IP of the resource owner
  userIp     String @db.Inet
  //State generated by BAB
  byondState String @unique @default(dbgenerated("md5(gen_random_uuid()::text)"))

  ///Response parameters
  //Ckey of the resource owner, if received
  ckey String?
  //Code, if issued
  code String? @unique

  ///Relations
  userData UserData? @relation(fields: [ckey], references: [ckey])
  client   Client    @relation(fields: [clientId], references: [clientId])
}

enum AuthorizationStatus {
  //Process has been started
  Created
  //Code has been issued to the client
  CodeIssued
  //Client has requested token
  Completed
}

model UserData {
  ckey          String          @id
  gender        String
  Authorization Authorization[]
}

model ByondCert {
  //Certificate provided to resource owner
  encodedCert String   @id @default(dbgenerated("md5(gen_random_uuid()::text)"))
  //State to identify request
  byondState  String   @unique
  //Ceritificate provided by byond
  byondCert   String   @unique
  //IP of the resource owner when encoding the cert
  clientIp    String
  //Time at which the certificate was created, used for garbage collection
  createdTime DateTime @default(now())
}
